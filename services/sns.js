'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.sns_ListTopics = exports.sns_ListSubscriptions = exports.getPerms = void 0;
const client_sns_1 = require("@aws-sdk/client-sns");
let serviceCallManifest;
function getPerms() {
    return [
        {
            "service": "sns",
            "call": "GetTopicAttributes",
            "permission": "GetTopicAttributes",
            "initiator": false
        },
        {
            "service": "sns",
            "call": "ListTopics",
            "permission": "ListTopics",
            "initiator": true
        },
        {
            "service": "sns",
            "call": "GetSubscriptionAttributes",
            "permission": "GetSubscriptionAttributes",
            "initiator": false
        },
        {
            "service": "sns",
            "call": "ListSubscriptions",
            "permission": "ListSubscriptions",
            "initiator": true
        }
    ];
}
exports.getPerms = getPerms;
let sns_GetSubscriptionAttributes = (SubscriptionArn, client, objAttribs, catcher) => {
    // return new Promise((resolve, reject) => {
    // if (SubscriptionArn !== 'PendingConfirmation') {
    return client.send(new client_sns_1.GetSubscriptionAttributesCommand({
        SubscriptionArn
    }));
    // .then((data) => {
    //     resolve(data);
    // })
    // .catch((err) => {
    //     reject(err);
    // });
    // }
    // });
};
let sns_ListSubscriptions = (region, credentials, svcCallsAll, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_sns_1.SNSClient({
            region,
            credentials,
        });
        const pConfig = {
            client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_sns_1.paginateListSubscriptions)(pConfig, cmdParams);
        const arr = [];
        const arr2 = [];
        const _arr = [];
        for await (const page of paginator) {
            if (page.Subscriptions)
                arr.push(...page.Subscriptions);
            arr2.push(catcher.handle(page.Subscriptions, objAttribs));
        }
        let arr3 = [];
        arr3.push(arr.forEach((Subscription, i) => {
            if (Subscription.SubscriptionArn) {
                sns_GetSubscriptionAttributes(Subscription.SubscriptionArn, client, objAttribs, catcher)
                    .then((p) => {
                    // arr[i].Attributes = p.Attributes;
                    _arr.push({
                        Subscription: Subscription,
                        Attributes: p.Attributes,
                    });
                });
            }
        }));
        Promise.all(arr3)
            .then((aP) => {
            let objGlobal = {
                [region]: {
                    Subscriptions: _arr
                }
            };
            resolve(objGlobal);
        });
    });
};
exports.sns_ListSubscriptions = sns_ListSubscriptions;
let sns_GetTopicAttributes = (TopicArn, client, objAttribs, catcher) => {
    // return new Promise((resolve, reject) => {
    const cmd = new client_sns_1.GetTopicAttributesCommand({
        TopicArn,
    });
    return client.send(cmd);
    // return client.send(cmd);
    //     client.send(new GetTopicAttributesCommand(
    //         {
    //             TopicArn
    //         }
    //     ))
    //         .then((data) => {
    //             resolve(data);
    //         })
    //         .catch((err) => {
    //             reject(err);
    //         });
    // });
};
let sns_ListTopics = (region, credentials, svcCallsAll, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_sns_1.SNSClient({
            region,
            credentials,
        });
        const pConfig = {
            client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_sns_1.paginateListTopics)(pConfig, cmdParams);
        const arr = [];
        // const arr: {
        //     Attributes?: {},
        //     Topics: Topic[],
        // }[] = [];
        const arr2 = [];
        const _arr = [];
        for await (const page of paginator) {
            if (page.Topics)
                arr.push(...page.Topics);
            arr2.push(catcher.handle(page.Topics, objAttribs));
        }
        let arr3 = [];
        arr.forEach((_topic, i) => {
            if (_topic.TopicArn) {
                arr3.push(sns_GetTopicAttributes(_topic.TopicArn, client, objAttribs, catcher)
                    .then((p) => {
                    // arr[i].Attributes = p.Attributes;
                    // const _obj: {
                    //     Topic: Topic,
                    //     Attributes?: Record<string, string>,
                    // } = {
                    //     Topic: _topic,
                    //     Attributes: p.Attributes,
                    // };
                    _arr.push({
                        Topic: _topic,
                        Attributes: p.Attributes,
                    });
                }));
            }
        });
        // arr3.push(arr.forEach((Topic, i) => {
        //     sns_GetTopicAttributes(Topic.TopicArn, client, objAttribs, catcher)
        //         .then((p) => {
        //
        //             arr[i].Attributes = p.Attributes;
        //
        //         });
        // }));
        Promise.all(arr3)
            .then((aP) => {
            let objGlobal = {
                [region]: {
                    Topics: _arr
                }
            };
            resolve(objGlobal);
        });
    });
};
exports.sns_ListTopics = sns_ListTopics;
//# sourceMappingURL=data:application/json;base64,