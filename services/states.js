'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.states_ListStateMachines = exports.states_ListActivities = exports.getPerms = void 0;
const client_sfn_1 = require("@aws-sdk/client-sfn");
let serviceCallManifest;
function getPerms() {
    return [
        {
            "service": "states",
            "call": "ListActivities",
            "permission": "ListActivities",
            "initiator": true,
        },
        // {
        //   "service": "states",
        //   "call": "ListExecutions",
        //   "permission": "ListExecutions",
        //   "initiator": true,
        // },
        {
            "service": "states",
            "call": "DescribeActivity",
            "permission": "DescribeActivity",
            "initiator": false
        },
        {
            "service": "states",
            "call": "DescribeStateMachine",
            "permission": "DescribeStateMachine",
            "initiator": false
        },
        {
            "service": "states",
            "call": "ListStateMachines",
            "permission": "ListStateMachines",
            "initiator": true
        }
    ];
}
exports.getPerms = getPerms;
function states_DescribeActivity(activityArn, client, objAttribs, catcher) {
    // return new Promise((resolve, reject) => {
    return client.send(new client_sfn_1.DescribeActivityCommand({
        activityArn,
    }));
    // .then((data) => {
    //     resolve(data);
    // })
    // .catch((err) => {
    //     reject(err);
    // });
    // });
}
function states_DescribeStateMachine(stateMachineArn, client, objAttribs, catcher) {
    // return new Promise((resolve, reject) => {
    return client.send(new client_sfn_1.DescribeStateMachineCommand({
        stateMachineArn,
    }));
    // .then((data) => {
    //     resolve(data);
    // })
    // .catch((err) => {
    //     reject(err);
    // });
    // });
}
function states_ListActivities(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_sfn_1.SFNClient({
            region,
            credentials,
        });
        const pConfig = {
            client,
        };
        const cmdParams = {};
        const paginator = (0, client_sfn_1.paginateListActivities)(pConfig, cmdParams);
        const arr = [];
        const _arrC = [];
        try {
            for await (const page of paginator) {
                if (page.activities)
                    arr.push(...page.activities);
                _arrC.push(catcher.handle(page.activities, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        const arrPromisesActivities = [];
        arr.forEach((activity) => {
            if (activity.activityArn)
                arrPromisesActivities.push(states_DescribeActivity(activity.activityArn, client, objAttribs, catcher));
        });
        Promise.all(arrPromisesActivities)
            .then((arrActivities) => {
            let objGlobal = {
                [region]: {
                    Activities: arrActivities
                }
            };
            resolve(objGlobal);
        });
    });
}
exports.states_ListActivities = states_ListActivities;
function states_ListStateMachines(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_sfn_1.SFNClient({
            region,
            credentials,
        });
        const pConfig = {
            client,
        };
        const cmdParams = {};
        const paginator = (0, client_sfn_1.paginateListStateMachines)(pConfig, cmdParams);
        const arr = [];
        const _arrC = [];
        try {
            for await (const page of paginator) {
                if (page.stateMachines)
                    arr.push(...page.stateMachines);
                _arrC.push(catcher.handle(page.stateMachines, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        const arrPromisesStateMachines = [];
        arr.forEach((stateMachine) => {
            if (stateMachine.stateMachineArn)
                arrPromisesStateMachines.push(states_DescribeStateMachine(stateMachine.stateMachineArn, client, objAttribs, catcher));
        });
        Promise.all(arrPromisesStateMachines)
            .then((arrStateMachines) => {
            let objGlobal = {
                [region]: {
                    StateMachines: arrStateMachines
                }
            };
            resolve(objGlobal);
        });
    });
}
exports.states_ListStateMachines = states_ListStateMachines;
//# sourceMappingURL=data:application/json;base64,