'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.iam_ListRoles = exports.iam_ListPolicies = exports.iam_ListUsers = exports.getPerms = void 0;
const client_iam_1 = require("@aws-sdk/client-iam");
let serviceCallManifest;
function getPerms() {
    return [
        {
            "service": "iam",
            "call": "GetUserPolicy",
            "permission": "GetUserPolicy",
            "initiator": false
        },
        {
            "service": "iam",
            "call": "ListUserPolicies",
            "permission": "ListUserPolicies",
            "initiator": false
        },
        {
            "service": "iam",
            "call": "ListUsers",
            "permission": "ListUsers",
            "initiator": true
        },
        {
            "service": "iam",
            "call": "GetPolicyVersion",
            "permission": "GetPolicyVersion",
            "initiator": false
        },
        {
            "service": "iam",
            "call": "GetPolicy",
            "permission": "GetPolicy",
            "initiator": false
        },
        {
            "service": "iam",
            "call": "ListPolicies",
            "permission": "ListPolicies",
            "initiator": true
        },
        {
            "service": "iam",
            "call": "ListRoles",
            "permission": "ListRoles",
            "initiator": true
        }
    ];
}
exports.getPerms = getPerms;
let iam_GetUserPolicy = (user, policies, client, objAttribs, catcher) => {
    return new Promise((resolve, reject) => {
        let arrPromises = [];
        // let arrPromises: Promise<{
        //     UserId: string,
        //     Document: string,
        // }> | Promise<void>[] = [];
        let UserName = user.UserName;
        policies.forEach((PolicyName) => {
            const oParams = {
                PolicyName,
                UserName,
            };
            arrPromises.push(client.send(new client_iam_1.GetUserPolicyCommand(oParams)));
            // .then((data) => {
            //     resolve({
            //         UserId: user.UserId,
            //         Document: data.PolicyDocument,
            //     });
            //
            // })
            // .catch((e) => {
            //     reject(e);
            // }));
        });
        Promise.all(arrPromises)
            .then((aPs) => {
            resolve(aPs);
        });
    });
};
let iam_ListUserPolicies = (users, client, objAttribs, catcher) => {
    return new Promise((resolve, reject) => {
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        users.forEach(async (user) => {
            const UserName = user.UserName;
            const cmdParams = {
                UserName,
            };
            const paginator = (0, client_iam_1.paginateListUserPolicies)(pConfig, cmdParams);
            const arr = [];
            try {
                for await (const page of paginator) {
                    if (page.PolicyNames)
                        arr.push(...page.PolicyNames);
                }
            }
            catch (e) {
                reject(e);
            }
            // this.arrUserPolicies = arr;
            let arrPromises = [];
            if (arr.length > 0) {
                arrPromises.push(iam_GetUserPolicy(user, arr, client, objAttribs, catcher));
            }
            Promise.all(arrPromises)
                .then((p) => {
                // resolve(`${region}/iam_ListUserPolicies`);
                resolve(null);
            });
        });
    });
};
let iam_ListUsers = (region, credentials, svcCallsAll, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_iam_1.IAMClient({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_iam_1.paginateListUsers)(pConfig, cmdParams);
        const arr = [];
        const _arrC = [];
        try {
            for await (const page of paginator) {
                if (page.Users)
                    arr.push(...page.Users);
                _arrC.push(catcher.handle(page.Users, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        // this.objGlobal[region].Users = arr;
        let objGlobal = {
            [region]: {
                Users: arr
            }
        };
        iam_ListUserPolicies(arr, client, objAttribs, catcher)
            .then((obj) => {
            // resolve(`${region}/iam_ListUsers`);
            resolve(objGlobal);
        });
    });
};
exports.iam_ListUsers = iam_ListUsers;
let iam_GetPolicyVersion = (policy, client, objAttribs, catcher) => {
    return new Promise((resolve, reject) => {
        const PolicyArn = policy.Arn;
        const VersionId = policy.DefaultVersionId;
        const oParams = {
            PolicyArn,
            VersionId,
        };
        // let arr = [];
        client.send(new client_iam_1.GetPolicyVersionCommand(oParams))
            .then((data) => {
            // if (this.objGlobal[region].PolicyDocuments === undefined) {
            //     this.objGlobal[region].PolicyDocuments = [];
            // }
            // this.objGlobal[region].PolicyDocuments.push(
            //     {
            //         PolicyId: policy.PolicyId,
            //         PolicyVersion: data.PolicyVersion,
            //     }
            // );
            // arr.push({
            //     PolicyId: policy.PolicyId,
            //     PolicyVersion: data.PolicyVersion,
            // });
            // let objGlobal = {
            //     [region]: {
            //         PolicyDocuments:
            //     }
            // }
            if (policy.PolicyId && data.PolicyVersion)
                resolve({
                    PolicyId: policy.PolicyId,
                    PolicyVersion: data.PolicyVersion,
                });
        })
            .catch((e) => {
            reject(e);
        });
    });
};
let iam_GetPolicy = (policy, client, objAttribs, catcher) => {
    return new Promise((resolve, reject) => {
        const PolicyArn = policy.Arn;
        const oParams = {
            PolicyArn,
        };
        client.send(new client_iam_1.GetPolicyCommand(oParams))
            .then((data) => {
            if (data.Policy) {
                iam_GetPolicyVersion(data.Policy, client, objAttribs, catcher)
                    .then((p) => {
                    resolve(p);
                });
            }
        })
            .catch((e) => {
            reject(e);
        });
    });
};
let iam_ListPolicies = (region, credentials, svcCallsAll, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_iam_1.IAMClient({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 200,
        };
        const cmdParams = {
            Scope: 'Local',
        };
        const paginator = (0, client_iam_1.paginateListPolicies)(pConfig, cmdParams);
        const arr = [];
        const _arrC = [];
        try {
            for await (const page of paginator) {
                if (page.Policies)
                    arr.push(...page.Policies);
                _arrC.push(catcher.handle(page.Policies, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        const arrPromises = [];
        arr.forEach((policy) => {
            arrPromises.push(iam_GetPolicy(policy, client, objAttribs, catcher));
        });
        Promise.all(arrPromises)
            .then((p) => {
            let obj = {
                [region]: {
                    Policies: []
                }
            };
            // obj[region].Policies.push(p);
            obj[region].Policies = p;
            // for (let i = 0; i < p.length; i++) {
            //     obj[region].Policies.push(p[i]);
            // obj[region].Policies.push(p);
            // }
            resolve(obj);
        });
    });
};
exports.iam_ListPolicies = iam_ListPolicies;
let iam_ListRoles = (region, credentials, svcCallsAll, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_iam_1.IAMClient({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_iam_1.paginateListRoles)(pConfig, cmdParams);
        const arr = [];
        const _arrC = [];
        try {
            for await (const page of paginator) {
                if (page.Roles)
                    arr.push(...page.Roles);
                _arrC.push(catcher.handle(page.Roles, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        let obj = {
            [region]: {
                Roles: arr
            }
        };
        resolve(obj);
    });
};
exports.iam_ListRoles = iam_ListRoles;
//# sourceMappingURL=data:application/json;base64,