'use strict';
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ec2_DescribeSecurityGroups = exports.ec2_DescribeInstances = exports.ec2_DescribeSubnets = exports.ec2_DescribeVpcs = exports.ec2_DescribeVolumes = exports.ec2_DescribeRouteTables = exports.ec2_DescribeAvailabilityZones = exports.getPerms = void 0;
const client_ec2_1 = require("@aws-sdk/client-ec2");
const sha256_1 = __importDefault(require("sha256"));
let MAX_WAIT = 800;
let WAIT = 800;
let queue = {};
let serviceCallManifest;
let getPerms = () => {
    return [
        {
            "service": "ec2",
            "call": "DescribeVpcs",
            "permission": "DescribeVpcs",
            "initiator": true
        },
        {
            "service": "ec2",
            "call": "DescribeAvailabilityZones",
            "permission": "DescribeAvailabilityZones",
            "initiator": true
        },
        {
            "service": "ec2",
            "call": "DescribeSecurityGroups",
            "permission": "DescribeSecurityGroups",
            "initiator": true
        },
        {
            "service": "ec2",
            "call": "DescribeVolumes",
            "permission": "DescribeVolumes",
            "initiator": true
        },
        {
            "service": "ec2",
            "call": "DescribeRouteTables",
            "permission": "DescribeRouteTables",
            "initiator": true
        },
        {
            "service": "ec2",
            "call": "DescribeSubnets",
            "permission": "DescribeSubnets",
            "initiator": true
        },
        {
            "service": "ec2",
            "call": "DescribeInstances",
            "permission": "DescribeInstances",
            "initiator": true
        }
    ];
};
exports.getPerms = getPerms;
let randString = (length) => {
    let strRandom = '';
    let chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    for (let i = 0; i < length; i++) {
        let rPos = Math.floor(Math.random() * chars.length);
        let char = chars.charAt(rPos);
        strRandom += char;
    }
    return strRandom;
};
let rStr = () => {
    return (0, sha256_1.default)(randString(64));
};
let qR = () => {
    return new Promise(async (resolve) => {
        let promises = [];
        while (Object.keys(queue).length > 0) {
            let aHashes = Object.keys(queue);
            for (let i = 0; i < aHashes.length; i++) {
                let hash = aHashes[i];
                if (queue[hash] !== undefined) {
                    if (queue[hash].inFlight === false) {
                        queue[hash].inFlight = true;
                        await new Promise(resolve => setTimeout(resolve, WAIT));
                        promises.push(queue[hash].fn(...queue[hash].params)
                            .then(() => {
                            WAIT = Math.ceil(WAIT * 0.95);
                            delete queue[hash];
                        })
                            .catch((e) => {
                            queue[hash].inFlight = false;
                            if (e.name === 'TooManyRequestsException') {
                                WAIT = MAX_WAIT;
                            }
                            else {
                                //   delete queue[hash];
                            }
                        }));
                    }
                }
            }
            await new Promise(resolve => setTimeout(resolve, 100));
        }
        Promise.all(promises)
            .then(() => {
            resolve(null);
        });
    });
};
function ec2_DescribeAvailabilityZones(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise((resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_ec2_1.EC2Client({
            region,
            credentials,
        });
        let arr = [];
        const arr2 = [];
        client.send(new client_ec2_1.DescribeAvailabilityZonesCommand({}))
            .then((data) => {
            if (data.AvailabilityZones) {
                for (let i = 0; i < data.AvailabilityZones.length; i++) {
                    let AvailabilityZone = data.AvailabilityZones[i];
                    arr.push(AvailabilityZone);
                    arr2.push(catcher.handle([AvailabilityZone], objAttribs));
                }
            }
            // data.AvailabilityZones.forEach((AvailabilityZone) => {
            //     if (this.objGlobal[region].AvailabilityZones === undefined) {
            //         this.objGlobal[region].AvailabilityZones = [];
            //     }
            //
            //     this.objGlobal[region].AvailabilityZones.push(AvailabilityZone);
            // });
            // resolve(`${region}/ec2_DescribeAvailabilityZones`);
            let objGlobal = {
                [region]: {
                    AvailabilityZones: arr
                }
            };
            resolve(objGlobal);
        })
            .catch((e) => {
            reject(e);
        });
    });
}
exports.ec2_DescribeAvailabilityZones = ec2_DescribeAvailabilityZones;
function ec2_DescribeRouteTables(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_ec2_1.EC2Client({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_ec2_1.paginateDescribeRouteTables)(pConfig, cmdParams);
        const arr = [];
        const arr2 = [];
        try {
            for await (const page of paginator) {
                if (page.RouteTables)
                    arr.push(...page.RouteTables);
                arr2.push(catcher.handle(page.RouteTables, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        // this.objGlobal[region].RouteTables = arr;
        // resolve(`${region}/ec2_DescribeRouteTables`);
        let objGlobal = {
            [region]: {
                RouteTables: arr
            }
        };
        resolve(objGlobal);
    });
}
exports.ec2_DescribeRouteTables = ec2_DescribeRouteTables;
function ec2_DescribeVolumes(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_ec2_1.EC2Client({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_ec2_1.paginateDescribeVolumes)(pConfig, cmdParams);
        const arr = [];
        const arr2 = [];
        try {
            for await (const page of paginator) {
                if (page.Volumes)
                    arr.push(...page.Volumes);
                arr2.push(catcher.handle(page.Volumes, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        // this.objGlobal[region].Volumes = arr;
        // resolve(`${region}/ec2_DescribeVolumes`);
        let objGlobal = {
            [region]: {
                Volumes: arr
            }
        };
        resolve(objGlobal);
    });
}
exports.ec2_DescribeVolumes = ec2_DescribeVolumes;
function ec2_DescribeVpcs(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_ec2_1.EC2Client({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_ec2_1.paginateDescribeVpcs)(pConfig, cmdParams);
        const arr = [];
        const arr2 = [];
        try {
            for await (const page of paginator) {
                if (page.Vpcs)
                    arr.push(...page.Vpcs);
                arr2.push(catcher.handle(page.Vpcs, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        // this.objGlobal[region].Vpcs = arr;
        // resolve(`${region}/ec2_DescribeVpcs`);
        let objGlobal = {
            [region]: {
                Vpcs: arr
            }
        };
        resolve(objGlobal);
    });
}
exports.ec2_DescribeVpcs = ec2_DescribeVpcs;
function ec2_DescribeSubnets(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_ec2_1.EC2Client({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_ec2_1.paginateDescribeSubnets)(pConfig, cmdParams);
        const arr = [];
        const arr2 = [];
        try {
            for await (const page of paginator) {
                if (page.Subnets)
                    arr.push(...page.Subnets);
                arr2.push(catcher.handle(page.Subnets, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        // this.objGlobal[region].Subnets = arr;
        // resolve(`${region}/ec2_DescribeSubnets`);
        let objGlobal = {
            [region]: {
                Subnets: arr
            }
        };
        resolve(objGlobal);
    });
}
exports.ec2_DescribeSubnets = ec2_DescribeSubnets;
function ec2_DescribeInstances(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_ec2_1.EC2Client({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_ec2_1.paginateDescribeInstances)(pConfig, cmdParams);
        const arr = [];
        const arr2 = [];
        try {
            for await (const page of paginator) {
                if (page.Reservations) {
                    page.Reservations.forEach((reservation) => {
                        if (reservation.Instances)
                            arr.push(...reservation.Instances);
                        arr2.push(catcher.handle(reservation.Instances, objAttribs));
                    });
                }
            }
        }
        catch (e) {
            reject(e);
        }
        // this.objGlobal[region].Instances = arr;
        // resolve(`${region}/ec2_DescribeInstances`);
        let objGlobal = {
            [region]: {
                Instances: arr
            }
        };
        resolve(objGlobal);
    });
}
exports.ec2_DescribeInstances = ec2_DescribeInstances;
function ec2_DescribeSecurityGroups(region, credentials, svcCallsAll, objAttribs, catcher) {
    return new Promise(async (resolve, reject) => {
        serviceCallManifest = svcCallsAll;
        let client = new client_ec2_1.EC2Client({
            region,
            credentials,
        });
        const pConfig = {
            client: client,
            pageSize: 100,
        };
        const cmdParams = {};
        const paginator = (0, client_ec2_1.paginateDescribeSecurityGroups)(pConfig, cmdParams);
        const arr = [];
        const arr2 = [];
        try {
            for await (const page of paginator) {
                if (page.SecurityGroups)
                    arr.push(...page.SecurityGroups);
                arr2.push(catcher.handle(page.SecurityGroups, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        // this.objGlobal[region].SecurityGroups = arr;
        // resolve(`${region}/ec2_DescribeSecurityGroups`);
        let objGlobal = {
            [region]: {
                SecurityGroups: arr
            }
        };
        resolve(objGlobal);
    });
}
exports.ec2_DescribeSecurityGroups = ec2_DescribeSecurityGroups;
//# sourceMappingURL=data:application/json;base64,