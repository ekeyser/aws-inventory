'use strict';
Object.defineProperty(exports, "__esModule", { value: true });
exports.cognitoidp_ListUserPools = exports.getPerms = void 0;
const client_cognito_identity_provider_1 = require("@aws-sdk/client-cognito-identity-provider");
function getPerms() {
    return [
        {
            "service": "cognito-idp",
            "call": "ListUserPools",
            "permission": "ListUserPools",
            "initiator": true
        },
        {
            "service": "cognito-idp",
            "call": "ListUsers",
            "permission": "ListUsers",
            "initiator": false
        },
        {
            "service": "cognito-idp",
            "call": "ListGroups",
            "permission": "ListGroups",
            "initiator": false
        },
    ];
}
exports.getPerms = getPerms;
let cognitoidp_ListGroups = (UserPoolId, client, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        const pConfig = {
            client,
            pageSize: 60,
        };
        const cmdParams = {
            UserPoolId,
        };
        const paginator = (0, client_cognito_identity_provider_1.paginateListGroups)(pConfig, cmdParams);
        const arr = [];
        try {
            for await (const page of paginator) {
                if (page.Groups)
                    arr.push(...page.Groups);
            }
        }
        catch (e) {
            reject(e);
        }
        let obj = {
            Groups: [],
        };
        obj.Groups.push(...arr);
        resolve(obj);
    });
};
let cognitoidp_ListUsers = (UserPoolId, client, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        const pConfig = {
            client,
            pageSize: 60,
        };
        const cmdParams = {
            UserPoolId,
        };
        const paginator = (0, client_cognito_identity_provider_1.paginateListUsers)(pConfig, cmdParams);
        const arr = [];
        try {
            for await (const page of paginator) {
                if (page.Users)
                    arr.push(...page.Users);
            }
        }
        catch (e) {
            reject(e);
        }
        let obj = {
            Users: [],
        };
        obj.Users.push(...arr);
        resolve(obj);
    });
};
let cognitoidp_ListUserPools = (region, credentials, svcCallsAll, objAttribs, catcher) => {
    return new Promise(async (resolve, reject) => {
        const client = new client_cognito_identity_provider_1.CognitoIdentityProviderClient({
            region,
            credentials,
        });
        const pConfig = {
            client,
            pageSize: 60,
        };
        const _input = {
            MaxResults: 60,
        };
        const paginator = (0, client_cognito_identity_provider_1.paginateListUserPools)(pConfig, _input);
        const arr = [];
        const _arrC = [];
        try {
            for await (const page of paginator) {
                if (page.UserPools)
                    arr.push(...page.UserPools);
                _arrC.push(catcher.handle(page.UserPools, objAttribs));
            }
        }
        catch (e) {
            reject(e);
        }
        let arrPromisesG = [];
        let arrPromisesU = [];
        arr.forEach((objUserPool, i) => {
            if (svcCallsAll.indexOf('ListUsers') > -1) {
                if (objUserPool.Id)
                    arrPromisesU.push(cognitoidp_ListUsers(objUserPool.Id, client, objAttribs, catcher));
            }
            if (svcCallsAll.indexOf('ListGroups') > -1) {
                if (objUserPool.Id)
                    arrPromisesG.push(cognitoidp_ListGroups(objUserPool.Id, client, objAttribs, catcher));
            }
        });
        Promise.all(arrPromisesU)
            .then((arrResourcesUsers) => {
            Promise.all(arrPromisesG)
                .then((arrResourcesGroups) => {
                let objReturn = {
                    [region]: {
                        UserPools: arr,
                        Users: [],
                        Groups: [],
                    }
                };
                arrResourcesUsers.forEach((objResource) => {
                    if (objResource.Users)
                        objReturn[region].Users.push(...objResource.Users);
                });
                arrResourcesGroups.forEach((objResource) => {
                    objReturn[region].Groups.push(...objResource.Groups);
                });
                resolve(objReturn);
            });
        });
    });
};
exports.cognitoidp_ListUserPools = cognitoidp_ListUserPools;
//# sourceMappingURL=data:application/json;base64,